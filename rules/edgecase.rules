'''
##############################################################################
# Mapping using minimap2
##############################################################################

This rule will map fastq file for a single sample and batch to the extended 
reference that contains *subtelomere* sequences.
'''


def telomere_extended_alignment_input(wildcards):
    for i in range(len(sbf.sbf_filenames)): 
        if sbf.sbf_samples[i]==wildcards.sample and sbf.sbf_batches[i] == wildcards.batch:
             yield os.path.join(basedir, 'fastq', wildcards.sample, 'batched', wildcards.batch, '%s.fastq'%sbf.sbf_filenames[i])

rule telomere_extended_alignment:
    input: telomere_extended_alignment_input
    output: os.path.join(basedir, 'telomeres', 'mapping', '{sample}', '{batch}.sorted.bam')
    params:
        jobname='edgecase_align_{sample}_{batch}',
        runtime='02:00',
        memusage='16000',
        slots='8',
        misc=''
    shell: '''
           {minimap2} -t 4 -a -x map-ont {telomere_extended_reference} {input} | {samtools} view -h -b | {samtools} sort -@ 4 -T {output}.tmp -o {output}
           {samtools} index {output}
           '''

checkpoint all_telomere_extended_alignment:
    input: expand(rules.telomere_extended_alignment.output, zip_combinator, sample=sbf.sbf_samples, batch=sbf.sbf_batches)

rule edgecase_tailpuller:
    input: rules.telomere_extended_alignment.output
    output: os.path.join(basedir, 'telomeres', 'edgecase', '{sample}', '{batch}.tails.bam')
    params:
        jobname='edgecase_pull_{sample}_{batch}',
        runtime='00:30',
        memusage='4000',
        slots='1',
        misc=''
    shell: '''
           {edgecase} tailpuller --index {subtelomere_index} -F 256 {input} | samtools view -bh - > {output}
           '''

checkpoint all_edgecase_tailpuller:
    input: expand(rules.edgecase_tailpuller.output, zip_combinator, sample=sbf.sbf_samples, batch=sbf.sbf_batches)


def prepare_merge_edgecase_tailpuller_input(wildcards):
    for i in range(len(sbf.sbf_batches)): 
        if sbf.sbf_samples[i]==wildcards.sample:
             yield os.path.join(basedir, 'telomeres', 'edgecase', wildcards.sample, '%s.tails.bam' % sbf.sbf_batches[i])

checkpoint prepare_merge_edgecase_tailpuller:
    input: prepare_merge_edgecase_tailpuller_input
    output: os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.filelist.txt')
    run: 
        fl = set(input)
        with open(output[0], 'w') as f:
            for l in fl:
                f.write(l)
                f.write('\n')
            

checkpoint merge_edgecase_tailpuller:
    input: rules.prepare_merge_edgecase_tailpuller.output
    output: os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.tails.merged.bam')
    params:
        jobname='merge_edgecase_pull_{sample}',
        runtime='00:30',
        memusage='4000',
        slots='1',
        misc=''
    shell: '''
           {samtools} merge -b {input} - | samtools sort - > {output}
           '''

checkpoint all_merge_edgecase_tailpuller:
    input: expand(rules.merge_edgecase_tailpuller.output, sample=sbf.sbf_samples)

rule edgecase_tailchopper:
    input: rules.merge_edgecase_tailpuller.output
    output: os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.tails.chopped.bam')
    params:
        jobname='edgecase_chop_{sample}',
        runtime='03:00',
        memusage='8000',
        slots='1',
        misc=''
    shell: '''
           {edgecase} tailchopper --index {subtelomere_index} {input} > {output}
           '''

checkpoint all_edgecase_tailchopper:
    input: expand(rules.edgecase_tailchopper.output, zip_combinator, sample=sbf.sbf_samples, batch=sbf.sbf_batches)


rule edgecase_repeatfinder:
    input: rules.edgecase_tailchopper.output
    output: full=os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.repeats.tsv'),
            top=os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.repeats.top.tsv')
    params:
        jobname='edgecase_repeats_{sample}',
        runtime='03:00',
        memusage='32000',
        slots='8',
        misc=''
    shell: '''
           {edgecase} repeatfinder --min-k 6 --max-k 10 -j 8 --jellyfish {jellyfish} {input} > {output.full}
           head -10 {output.full} > {output.top}
           '''

checkpoint all_edgecase_repeatfinder:
    input: expand(rules.edgecase_repeatfinder.output, sample=sbf.sbf_samples)


rule edgecase_kmerscanner:
    input: repeats=rules.edgecase_repeatfinder.output.top, 
           tails=rules.edgecase_tailchopper.output
    output: os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.kmerdensity.dat')
    params:
        jobname='edgecase_kmerscan_{sample}',
        runtime='01:00',
        memusage='32000',
        slots='8',
        misc=''
    shell: '''
           {edgecase} kmerscanner -j 8 --motif-file {input.repeats} {input.tails} > {output}
           '''

checkpoint all_edgecase_kmerscanner:
    input: expand(rules.edgecase_kmerscanner.output, sample=['Primary','Germline','Relapse'])

rule edgecase_densityplot:
    input: rules.edgecase_kmerscanner.output
    output: q=os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.kmerdensity.q.pdf'),
            p=os.path.join(basedir, 'telomeres', 'edgecase', '{sample}.kmerdensity.p.pdf')
    params:
        jobname='edgecase_densityplot_{sample}',
        runtime='01:00',
        memusage='16000',
        slots='1',
        misc=''
    shell: '''
           {edgecase} densityplot --index {subtelomere_index} -f 36864 {input} > {output.q};
           {edgecase} densityplot --index {subtelomere_index} -f 4096 -F 32768 {input} > {output.p}
           '''

checkpoint all_edgecase_densityplot:
    input: expand(rules.edgecase_densityplot.output, sample=['Primary','Germline','Relapse'])

localrules: prepare_merge_edgecase_tailpuller


