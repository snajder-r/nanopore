import os
import sys
import shutil
from pathlib import Path
import subprocess

from modusa.diskusage import check_free_space, compute_total_file_size_gb

if "scratch_dir" not in globals().keys():
    scratch_dir=os.path.join(basedir,'tmp')

if "jobid_env_var" not in globals().keys():
    jobid_env_var="LSB_JOBID"

if "mapping_filter_params" not in globals().keys():
    mapping_filter_params = ""

if "filter_chroms" not in globals().keys():
    filter_chroms = False


def bonito_script():
    if "remora_model" in globals().keys():
        remora_model_str = f"--modified-base-model {remora_model}"
    else:
        remora_model_str = f"--modified-bases 5mC"

    script = """
    {cuda_load_hook} && 
    {bonito} basecaller {bonito_model} --alignment-threads 1 --reference {reference_mmi} """ + remora_model_str + """ -- {input} > {output.unsorted} &&
    {samtools} sort {output.unsorted} > {output.sorted} """
    if mapping_filter_params != "" or filter_chroms:
        chrom_filter_string = " ".join(chroms) if filter_chroms else ""
        script += """ &&
        mv {output.sorted} {output.sorted}.unfiltered;
        {samtools} index {output.sorted}.unfiltered;
        {samtools} view {mapping_filter_params} {output.sorted}.unfiltered """+chrom_filter_string+""" -b > {output.sorted};
        rm {output.sorted}.unfiltered;
        """
    return script

rule bonito_basecall_metcall:
    input: Path(basedir).joinpath("raw", "{sample}", "batched", "{batch}")
    output: sorted = Path(basedir).joinpath("remora", "{sample}", "{batch}.sorted.bam"),
            unsorted = temp(Path(basedir).joinpath("remora","{sample}","{batch}.unsorted.bam")),
            summary = temp(Path(basedir).joinpath("remora","{sample}","{batch}.unsorted_summary.tsv"))
    params:
        jobname='bonito_{sample}_{batch}',
        runtime='04:00',
        memusage='24000',
        slots='8',
        misc = gpu_params,
    shell: bonito_script()

def prepare_bonito_metcall_mergebams_input(wc):
    for batch in samplebatches(wc["sample"]):
        yield rules.bonito_basecall_metcall.output.sorted.format(sample=wc["sample"], batch=batch)

rule prepare_bonito_metcall_mergebams:
    input: prepare_bonito_metcall_mergebams_input
    output: os.path.join(basedir, 'remora/{sample}.bam.filelist.txt')
    run:
        with open(output[0],"w") as f:
            for infile in input:
                f.write(f"{infile}\n")

rule merge_bonito_metcall:
    input: rules.prepare_bonito_metcall_mergebams.output
    output: Path(basedir).joinpath("remora", "{sample}_merged.bam")
    params:
        jobname='remora_mergebam_{sample}',
        runtime='24:00',
        memusage='24000',
        slots='1',
        misc=''
    shell: '''
           {samtools} merge -b {input} - > {output}
           '''

rule all_merge_bonito_metcall:
    input: expand(rules.merge_bonito_metcall.output, sample=unique_samples)

rule all_bonito_basecall_metcall:
    input: expand(rules.bonito_basecall_metcall.output.sorted, zip, sample=sbf.sbf_samples,  batch=sbf.sbf_batches),
           expand(rules.bonito_basecall_metcall.output.sorted+".bai", zip, sample=sbf.sbf_samples, batch=sbf.sbf_batches),

localrules: prepare_bonito_metcall_mergebams