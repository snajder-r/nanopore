import os
import sys
import shutil
import subprocess

class GuppyWrapper:
    def __init__(self, guppy_dir, guppy_conf='dna_r9.4.1_450bps_modbases_dam-dcm-cpg_hac.cfg',
                 scratch_dir=None, batch_size=15, gpu=True, cpu_threads=1):
        self.guppy = os.path.join(guppy_dir,'bin','guppy_basecaller')
        self.guppy_conf = guppy_conf
        self.scratch_dir = scratch_dir
        self.batch_size=batch_size
        self.gpu=gpu
        self.cpu_threads = cpu_threads

    def run_guppy(self, indir, outdir):
        if self.gpu:
            guppy_command = '{guppy} --input_path {indir} --save_path {outdir} --device auto ' \
                    '--config {guppy_conf} --gpu_runners_per_device 1 ' \
                    '--fast5_out --post_out'.format(guppy=self.guppy, indir=indir, outdir=outdir, guppy_conf=self.guppy_conf).split(' ')
        else:
            guppy_command = '{guppy} --input_path {indir} --save_path {outdir} ' \
                    '--config {guppy_conf} --num_callers {threads} ' \
                    '--fast5_out --post_out'.format(guppy=self.guppy, indir=indir, outdir=outdir, threads=self.cpu_threads, guppy_conf=self.guppy_conf).split(' ')
            print(guppy_command)


        p = subprocess.Popen(guppy_command, stdout=subprocess.PIPE)

        for line in p.stdout:
            print('Guppy: ' + line.decode('UTF-8'))

        return p.wait()


    def run_guppy_batchwise(self, inputdir, outputdir):
        LSB_JOBID=os.getenv('LSB_JOBID')

        fast5files = [f for f in os.listdir(inputdir) if f.endswith('fast5')]

        # Filter out files we already basecalled, so we don't do it twice
        if os.path.exists(outputdir):
            done_files = os.listdir(outputdir)
            print('Found %d fast5files. %d files are already basecalled' % (len(fast5files), len(done_files)))
            fast5files = [f for f in fast5files if not f in done_files]
            print('Need to basecall %d files' % len(fast5files))

        batches = [fast5files[i:(i+self.batch_size)] for i in range(0,len(fast5files), self.batch_size)]

        ssd_in=os.path.join(self.scratch_dir, LSB_JOBID, 'input')
        ssd_out=os.path.join(self.scratch_dir, LSB_JOBID,'output')

        for batch_i in range(len(batches)):
            try:
                print("Copying data to SSD (batch %d from %d)" % (batch_i, len(batches)))
                os.makedirs(ssd_in, exist_ok=True)
                os.makedirs(ssd_out, exist_ok=True)

                batch = batches[batch_i]

                for f in batch:
                    shutil.copyfile(os.path.join(inputdir,f), os.path.join(ssd_in,f))

                guppy_exitcode = self.run_guppy(ssd_in, ssd_out)

                if guppy_exitcode == 0:
                    # The directory where guppy stores the basecalled fast5 files, since we
                    # are only really interested in those and not so much the fastq files
                    basecalled_fast5_dir = os.path.join(ssd_out, 'workspace')
                    os.makedirs(outputdir, exist_ok=True)
                    print("Copying result to %s" % outputdir)
                    for f in os.listdir(basecalled_fast5_dir):
                        shutil.copyfile(os.path.join(basecalled_fast5_dir, f), os.path.join(outputdir, f))
                else:
                    raise RuntimeError('Guppy returned with exit code %d' % guppy_exitcode)

            finally:
                print("Cleaning up %s" % ssd_out)
                #pass
                shutil.rmtree(ssd_out)
                shutil.rmtree(ssd_in)

        with open(os.path.join(outputdir,'done'), 'w') as fp: 
            pass

'''
##############################################################################
# GUPPY basecalling
##############################################################################
'''

rule guppy_basecall:
    input: os.path.join(basedir, 'raw', '{sample}', 'multi')
    output: os.path.join(basedir, 'raw', '{sample}', 'guppy','done')
    params:
        outputdir= os.path.join(basedir, 'raw', '{sample}', 'guppy'),
        jobname='guppy_{sample}',
        runtime='48:00',
        memusage='32000',
        slots=1 if guppy_use_gpu else 16,
        scratchdir=temp(os.path.join(basedir, 'tmp')),
        misc = '-gpu num=1:j_exclusive=yes:mode=exclusive_process:gmem=10G' if guppy_use_gpu else ''
    run:
        gw = GuppyWrapper(guppy_dir, guppy_conf=guppy_conf, scratch_dir=params.scratchdir, batch_size=16, gpu=guppy_use_gpu, cpu_threads=params.slots)
        gw.run_guppy_batchwise(input[0], params.outputdir)

rule all_guppy_basecall:
    input: expand(rules.guppy_basecall.output, sample=unique_samples)


