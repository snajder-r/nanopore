from pathlib import Path

default_prediction_params = {"jobname":'pred_nanopolish_{sample}_{batch}', "runtime":'24:00', "memusage":'16000',
        "slots":'8', "misc":'', "alphabet": "m5c"}

default_smalljob_params = {"runtime":'4:00', "memusage":'16000', "slots":'2', "misc":''}
default_largememjob_params = {"runtime":'8:00', "memusage":'32000', "slots":'2', "misc":''}


if "nanopolish_call_acc_options" not in globals().keys():
    nanopolish_call_acc_options = ""

nanopolish_predict_script = """
    mkdir -p {params.outdir}
    cp {input.model} {output.model}
    echo $(basename {input.model}) > {output.model_fof}
    # Sub-shell because nanopolish requires us to change directory
    (
        cd {params.outdir}
        {nanopolish_acc} call-accessibility -t {params.slots} {nanopolish_call_acc_options} --min-flank {params.min_flank} --reads {input.fq} -m {output.model_fof} --bam {input.bam} --genome {reference} --methylation {params.alphabet} > {output.prediction}
    )
    """

def predict_accessibility_outdir():
    return Path(basedir).joinpath('nanopolish_accessibility', '{sample}', 'flank_{minflank}', '{batch}')

rule predict_accessibility:
    input:
        fq=rules.fast5_to_fastq.output,
        fqindex=rules.nanopolish_index.output,
        bam=rules.alignment.output,
        bai=f"{rules.alignment.output}.bai",
        model=accessibility_model
    output:
        model = temp(predict_accessibility_outdir().joinpath('r9.4_450bps.m5c.6mer.template.model')),
        model_fof=temp(predict_accessibility_outdir().joinpath('model_fof.txt')),
        prediction=predict_accessibility_outdir().joinpath('accessibility_prediction.tsv')
    params:
        **default_prediction_params,
        outdir = str(predict_accessibility_outdir()),
        min_flank = lambda wildcards: wildcards["minflank"],
    shell: nanopolish_predict_script

def merge_predict_accessibility_input(wildcards):
    return expand(rules.predict_accessibility.output.prediction, sample=wildcards.sample, batch=samplebatches(wildcards.sample), minflank="{minflank}")

all_flanking_options = [8]

rule merge_predict_accessibility:
    input: merge_predict_accessibility_input
    output: Path(basedir).joinpath('nanopolish_accessibility', '{sample}_all_accessibility_calls_flank_{minflank}.tsv.bgz')
    params: **default_smalljob_params, jobname="merge_acc"
    shell: """
           {tabix_load_hook}
           cat {input} | grep -v chromosome | sort -T {scratch_dir} -k1,1 -k3,3n | bgzip > {output};
           sleep 10; # napping because otherwise index file will be too new  
           tabix -s 1 -b 3 -e 4  {output}
           """


rule all_merge_predict_accessibility:
    input: expand(rules.merge_predict_accessibility.output, sample=unique_samples, minflank=all_flanking_options)


rule merge_predict_accessibility_all_samples:
    input: expand(rules.merge_predict_accessibility.output, sample=unique_samples, minflank="{minflank}")
    output: Path(basedir).joinpath('nanopolish_accessibility', 'ALL_accessibility_calls_flank_{minflank}.tsv.bgz')
    params: **default_smalljob_params, jobname="merge_acc"
    shell: """
           {tabix_load_hook}
           zcat {input} | grep -v chromosome | sort -T {scratch_dir} -k1,1 -k3,3n |  bgzip > {output};
           sleep 10; # napping because otherwise index file will be too new
           tabix -s 1 -b 3 -e 4  {output}
           """

rule all_merge_predict_accessibility_all_samples:
    input: expand(rules.merge_predict_accessibility_all_samples.output, minflank=all_flanking_options)
