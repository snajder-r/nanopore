from pathlib import Path
from meth5.meth5 import MetH5File

pycometh_merge_script = """
head -1 {input[0]} > {output};
grep -hv "chrom" {input} | sort -k1,1 -k2,2n -k3,3n --parallel={params.slots} >> {output}
"""


############
# ASM FROM OTHER SEGMENTATIONS
############

rule pycometh_diffmet_asm_methylkit:
    input: segmentation=Path(basedir, "bs/mock_bsseq_from_nanopore/{sample}_mockbsseq_segments_methylkit.tsv"),
           m5=rules.merge_met_hdf5.output
    output:
        tsv=Path(basedir,"pycometh/asm/diffmet_methylkit/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/asm/diffmet_methylkit/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_{sample}_{hypothesis}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="16000",
        slots="16",
    shell: "{pycometh} Meth_Comp -i {input.m5} -r {pycometh_haplotype_readgroup_param} -s H1 H2 -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_diffmet_asm_methylkit_all:
    input: expand(rules.pycometh_diffmet_asm_methylkit.output.tsv, sample=unique_samples, hypothesis=pycometh_hypothesis, ihw=["yes", "no"], mettype=mettypes)

rule pycometh_diffmet_asm_methcp:
    input: segmentation=Path(basedir, "bs/mock_bsseq_from_nanopore/{sample}_mockbsseq_segments_methcp.tsv"),
           m5=rules.merge_met_hdf5.output
    output:
        tsv=Path(basedir,"pycometh/asm/diffmet_methcp/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/asm/diffmet_methcp/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_{sample}_{hypothesis}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="16000",
        slots="16",

    shell: "{pycometh} Meth_Comp -i {input.m5} -r {pycometh_haplotype_readgroup_param} -s H1 H2 -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_diffmet_asm_methcp_all:
    input: expand(rules.pycometh_diffmet_asm_methcp.output.tsv, sample=unique_samples, hypothesis=pycometh_hypothesis, ihw=["yes", "no"], mettype=mettypes)


############
# PARENTS COMPARISON FROM OTHER SEGMENTATIONS
############


rule pycometh_diffmet_samplecomp_other:
    input: segmentation=Path(basedir, "bs/mock_bsseq_from_nanopore/parents_mockbsseq_segments_{other}.tsv"),
           m5=lambda wc: expand(rules.merge_met_hdf5.output, sample=pycometh_diffmet_samples, mettype=wc["mettype"])
    output:
        tsv=Path(basedir,"pycometh/samplecomp_{other}/{mettype}/diffmet/diffmet_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/samplecomp_{other}/{mettype}/diffmet/diffmet_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_methylkit_{hypothesis}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="24000",
        slots="8"
    shell: "{pycometh} Meth_Comp -i {input.m5} -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_diffmet_samplecomp_other_all:
    input: expand(rules.pycometh_diffmet_samplecomp_other.output.tsv, mettype=mettypes, hypothesis=pycometh_hypothesis, ihw=["yes", "no"], other=["methcp", "methylkit"])


############
# BENCHMARKING SEGMENTATION CONSISTENCY
############

rule nanoepiseg_subsetted:
    input: Path(basedir).joinpath("subset_m5/HG003_cpg.h5")
    output: Path(basedir).joinpath("subset_m5/segmentation/subset_{i}_segmented_cpg.tsv")
    params:
        jobname = 'nanoepiseg_subset_{i}',
        runtime= "24:00",
        slots="16",
        memusage="16000",
        misc= ""
    shell: """{nanoepiseg} segment_h5 --m5files {input} --chromosome 21_{wildcards.i} --read_groups_keys haplotype --out_tsv {output} --workers 14 --reader_workers 2 --max_segments_per_window 20"""

rule all_nanoepiseg_subsetted:
    input: expand(rules.nanoepiseg_subsetted.output, i=range(100))














#################################################################


def pycometh_randomized_segment_get_chrom_batches_samplecomp(wildcards):
    path1 = os.path.join(basedir,'met_merged','HG003_cpg_RANDOMIZED.h5')
    with MetH5File(str(path1).format(**wildcards, sample=pycometh_diffmet_samples[0]), "r", chunk_size=meth5_chunk_size) as f:
        for chrom in f.get_chromosomes():
            if chrom not in chroms:
                continue
            cur_batch = []
            for chunk in f[chrom].get_chunk_ids():
                cur_batch.append(f"{chunk}")
                if len(cur_batch) == pycometh_segment_chunks_per_job:
                    yield chrom, "_".join(cur_batch)
                    cur_batch = []
            if len(cur_batch) > 0:
                yield chrom, "_".join(cur_batch)

rule pycometh_randomized_segment_chunks_samplecomp:
    input: lambda wc: expand(Path(basedir,'met_merged','{sample}_{mettype}_RANDOMIZED.h5'), sample=pycometh_diffmet_samples, mettype=wc["mettype"])
    output: temp(Path(basedir, "pycometh/samplecomp_randomized/{mettype}/segmentation/chunks_{windowsize}_{maxsegments}/{chrom}/segments_{chunks}.tsv"))
    params:
        jobname='segment_{chunks}',
        chunks=lambda wc: wc["chunks"].replace("_"," "),
        misc="",
        runtime='16:00',
        memusage='16000',
        slots=pycometh_segment_chunks_per_job
    shell: "{pycometh} Meth_Seg -i {input}  -r {pycometh_haplotype_readgroup_param} -s H1 H2 -c {wildcards.chrom} -n {params.chunks} -t {output} --chunk_size {meth5_chunk_size} -p {params.slots} -m {wildcards.maxsegments} -w {wildcards.windowsize}"

def pycometh_randomized_segment_samplecomp_merge_input(wc):
    chroms_batches = list(pycometh_randomized_segment_get_chrom_batches_samplecomp(wc))
    # Shuffling the list of chrom-chunks might help better load-distribute the stress on the file system
    shuffle(chroms_batches)

    for chrom, chunks in chroms_batches:
        yield rules.pycometh_randomized_segment_chunks_samplecomp.output[0].format(chrom=chrom, chunks=chunks, mettype=wc["mettype"], windowsize=wc["windowsize"], maxsegments=wc["maxsegments"])

rule pycometh_randomized_segment_samplecomp_merge:
    input: pycometh_randomized_segment_samplecomp_merge_input
    output: Path(basedir,"pycometh/samplecomp_randomized/{mettype}/segmentation/segmentation_{windowsize}_{maxsegments}.tsv")
    params:
        jobname="merge_segmentation_{windowsize}_{maxsegments}",
        misc="",
        runtime="01:00",
        memusage="16000",
        slots="8",
    shell: "cat {input} | sort -k1,1 -k2,2n --parallel={params.slots} > {output}"

rule pycometh_randomized_diffmet_samplecomp:
    input: segmentation=rules.pycometh_randomized_segment_samplecomp_merge.output,
           m5=lambda wc: expand(Path(basedir,'met_merged','{sample}_{mettype}_RANDOMIZED.h5'), sample=pycometh_diffmet_samples, mettype=wc["mettype"])
    output:
        tsv=Path(basedir,"pycometh/samplecomp_randomized/{mettype}/diffmet/diffmet_{windowsize}_{maxsegments}_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/samplecomp_randomized/{mettype}/diffmet/diffmet_{windowsize}_{maxsegments}_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_samplecomp_{hypothesis}_{windowsize}_{maxsegments}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="32000",
        slots="8",
        sample_id_list=" ".join(pycometh_diffmet_samples)
    shell: "{pycometh} Meth_Comp -i {input.m5} -s {params.sample_id_list} -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_randomized_diffmet_samplecomp_all:
    input: expand(rules.pycometh_randomized_diffmet_samplecomp.output.tsv, mettype=mettypes, sample=unique_samples, hypothesis=pycometh_hypothesis, ihw=pycometh_ihw, windowsize=pycometh_windowsize, maxsegments=pycometh_maxsegments)
