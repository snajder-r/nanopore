from pathlib import Path
from meth5.meth5 import MetH5File

pycometh_merge_script = """
head -1 {input[0]} > {output};
grep -hv "chrom" {input} | sort -k1,1 -k2,2n -k3,3n --parallel={params.slots} >> {output}
"""


############
# ASM FROM OTHER SEGMENTATIONS
############

rule pycometh_diffmet_asm_methylkit:
    input: segmentation=Path(basedir, "bs/mock_bsseq_from_nanopore/{sample}_mockbsseq_segments_methylkit.tsv"),
           m5=rules.merge_met_hdf5.output
    output:
        tsv=Path(basedir,"pycometh/asm/diffmet_methylkit/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/asm/diffmet_methylkit/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_{sample}_{hypothesis}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="16000",
        slots="16",
    shell: "{pycometh} Meth_Comp -i {input.m5} -r {pycometh_haplotype_readgroup_param} -s H1 H2 -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_diffmet_asm_methylkit_all:
    input: expand(rules.pycometh_diffmet_asm_methylkit.output.tsv, sample=unique_samples, hypothesis=pycometh_hypothesis, ihw=["yes", "no"], mettype=mettypes)

rule pycometh_diffmet_asm_methcp:
    input: segmentation=Path(basedir, "bs/mock_bsseq_from_nanopore/{sample}_mockbsseq_segments_methcp.tsv"),
           m5=rules.merge_met_hdf5.output
    output:
        tsv=Path(basedir,"pycometh/asm/diffmet_methcp/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/asm/diffmet_methcp/{mettype}/{sample}_diffmet_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_{sample}_{hypothesis}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="16000",
        slots="16",

    shell: "{pycometh} Meth_Comp -i {input.m5} -r {pycometh_haplotype_readgroup_param} -s H1 H2 -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_diffmet_asm_methcp_all:
    input: expand(rules.pycometh_diffmet_asm_methcp.output.tsv, sample=unique_samples, hypothesis=pycometh_hypothesis, ihw=["yes", "no"], mettype=mettypes)


############
# PARENTS COMPARISON FROM OTHER SEGMENTATIONS
############


rule pycometh_diffmet_samplecomp_other:
    input: segmentation=Path(basedir, "bs/mock_bsseq_from_nanopore/parents_mockbsseq_segments_{other}.tsv"),
           m5=lambda wc: expand(rules.merge_met_hdf5.output, sample=pycometh_diffmet_samples, mettype=wc["mettype"])
    output:
        tsv=Path(basedir,"pycometh/samplecomp_{other}/{mettype}/diffmet/diffmet_hyp_{hypothesis}_ihw_{ihw}.tsv"),
        bed=Path(basedir,"pycometh/samplecomp_{other}/{mettype}/diffmet/diffmet_hyp_{hypothesis}_ihw_{ihw}.bed")
    params:
        jobname="pycometh_methylkit_{hypothesis}",
        ihw=lambda wc: " --do_independent_hypothesis_weighting" if wc["ihw"] == "yes" else "",
        misc="",
        runtime="06:00",
        memusage="24000",
        slots="8"
    shell: "{pycometh} Meth_Comp -i {input.m5} -f {reference} -a {input.segmentation} -w {params.slots} -t {output.tsv} -b {output.bed} --hypothesis {wildcards.hypothesis} {params.ihw} -p "

rule pycometh_diffmet_samplecomp_other_all:
    input: expand(rules.pycometh_diffmet_samplecomp_other.output.tsv, mettype=mettypes, hypothesis=pycometh_hypothesis, ihw=["yes", "no"], other=["methcp", "methylkit"])


############
# BENCHMARKING SEGMENTATION CONSISTENCY
############

rule nanoepiseg_subsetted:
    input: Path(basedir).joinpath("subset_m5/HG003_cpg.h5")
    output: Path(basedir).joinpath("subset_m5/segmentation/subset_{i}_segmented_cpg.tsv")
    params:
        jobname = 'nanoepiseg_subset_{i}',
        runtime= "24:00",
        slots="16",
        memusage="16000",
        misc= ""
    shell: """{nanoepiseg} segment_h5 --m5files {input} --chromosome 21_{wildcards.i} --read_groups_keys haplotype --out_tsv {output} --workers 14 --reader_workers 2 --max_segments_per_window 20"""

rule all_nanoepiseg_subsetted:
    input: expand(rules.nanoepiseg_subsetted.output, i=range(100))